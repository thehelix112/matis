// Copyright 2001, 2002 Commonwealth of Australia
// Authors: John Wharington, David Andrews, Peter Beckwith, Nicholas Hynes
// Defence Science Technology Organisation, Maritime Platforms Division
// CVS $RCSfile: MATIS_Action.cpp,v $
// CVS $Date: 2006/02/24 12:55:16 $
// CVS $Revision: 1.13 $





#include "MATIS_Action.h"
#include "MATIS_Action_RTI_13NG.h"
#include "MATIS_TypeConversion.h"
#include "MATIS_Channel.h"
#include "MATIS_LEAPBM.h"


using namespace MATIS;

/*
// BEGIN RTI_13NG
//--------------------------------
// RTI AMBASSADOR

//federation management //DONE
CREATE_FEDERATION_EXECUTION, //DONE
DESTROY_FEDERATION_EXECUTION, //DONE
FEDERATE_RESTORE_COMPLETE, //DONE
FEDERATE_RESTORE_NOT_COMPLETE, //DONE
FEDERATE_SAVE_BEGUN, //DONE
FEDERATE_SAVE_COMPLETE, //DONE
FEDERATE_SAVE_NOT_COMPLETE, //DONE		
JOIN_FEDERATION_EXECUTION, //DONE
REGISTER_FEDERATION_SYNCHRONISATION_POINT2, //DONE
REGISTER_FEDERATION_SYNCHRONISATION_POINT3, //DONE
REQUEST_FEDERATION_RESTORE, //DONE
REQUEST_FEDERATION_SAVE1, //DONE
REQUEST_FEDERATION_SAVE2, //DONE
RESIGN_FEDERATION_EXECUTION, //DONE
SYNCHRONISATION_POINT_ACHIEVED, //DONE

//declaration management //DONE (TESTING TO FOLLOW)
PUBLISH_INTERACTION_CLASS, //DONE
PUBLISH_OBJECT_CLASS, //DONE
SUBSCRIBE_INTERACTION_CLASS, //DONE
SUBSCRIBE_OBJECT_CLASS_ATTRIBUTES, //DONE
UNPUBLISH_INTERACTION_CLASS, //DONE
UNPUBLISH_OBJECT_CLASS, //DONE
UNSUBSCRIBE_INTERACTION_CLASS, //DONE
UNSUBSCRIBE_OBJECT_CLASS, //DONE

//object management //DONE (TESTING TO FOLLOW)
CHANGE_ATTRIBUTE_TRANSPORTATION_TYPE, //DONE
CHANGE_INTERACTION_TRANSPORTATION_TYPE, //DONE
DELETE_OBJECT_INSTANCE2, //DONE
DELETE_OBJECT_INSTANCE3, //DONE
LOCAL_DELETE_OBJECT_INSTANCE, //DONE
REGISTER_OBJECT_INSTANCE1, //DONE
REGISTER_OBJECT_INSTANCE2, //DONE
REQUEST_CLASS_ATTRIBUTE_VALUE_UPDATE, //DONE
REQUEST_OBJECT_ATTRIBUTE_VALUE_UPDATE, //DONE
SEND_INTERACTION3, //DONE
SEND_INTERACTION4, //DONE
UPDATE_ATTRIBUTE_VALUES, //DONE

//ownership managment //DONE MOSTLY (TESTING & AMMENDMENTS TO FOLLOW)
ATTRIBUTE_OWNERSHIP_ACQUISITION, //DONE
ATTRIBUTE_OWNERSHIP_ACQUISITION_IF_AVAILABLE, //DONE
ATTRIBUTE_OWNERSHIP_RELEASE_RESPONSE, //DONE (PARTLY)
CANCEL_ATTRIBUTE_OWNERSHIP_ACQUISITION, //DONE
CANCEL_NEGOTIATED_ATTRIBUTE_OWNERSHIP_DIVESTITURE, //DONE
IS_ATTRIBUTE_OWNED_BY_FEDERATE, //DONE (PARTLY)
NEGOTIATED_ATTRIBUTE_OWNERSHIP_DIVESTITURE, //DONE
QUERY_ATTRIBUTE_OWNERSHIP, //DONE
UNCONDITIONAL_ATTRIBUTE_OWNERSHIP_DIVESTITURE, //DONE

//time management //DONE (TESTING TO FOLLOW)
ENABLE_TIME_CONSTRAINED, //DONE
ENABLE_TIME_REGULATION, //DONE
DISABLE_TIME_CONSTRAINED, //DONE
DISABLE_TIME_REGULATION, //DONE
ENABLE_ASYNCHRONOUS_DELIVERY, //DONE
DISABLE_ASYNCHRONOUS_DELIVERY, //DONE
CHANGE_ATTRIBUTE_ORDER_TYPE, //DONE
CHANGE_INTERACTION_ORDER_TYPE, //DONE
FLUSH_QUEUE_REQUEST, //DONE
MODIFY_LOOKAHEAD, //DONE
NEXT_EVENT_REQUEST, //DONE
NEXT_EVENT_REQUEST_AVAILABLE, //DONE
QUERY_FEDERATE_TIME, //DONE
QUERY_LBTS, //DONE
QUERY_LOOKAHEAD, //DONE
QUERY_MINNEXTEVENTTIME, //DONE
RETRACT, //WAITING FOR ERH's TO BE ENTITIES
TIME_ADVANCE_REQUEST, //DONE
TIME_ADVANCE_REQUEST_AVAILABLE, //DONE

//data distribution management //GUTS THERE
ASSOCIATE_REGION_FOR_UPDATES, //DONE
CREATE_REGION, //DONE
DELETE_REGION, //DONE
NOTIFY_ABOUT_REGION_MODIFICATION, //DONE
REGISTER_OBJECT_INSTANCE_WITH_REGION4,//MOST COMPLICATED ONES!! NOT DONE
REGISTER_OBJECT_INSTANCE_WITH_REGION_SUB1,//MOST COMPLICATED ONES!! NOT DONE
REGISTER_OBJECT_INSTANCE_WITH_REGION5,//MOST COMPLICATED ONES!! NOT DONE
REQUEST_CLASS_ATTRIBUTE_VALUE_UPDATE_WITH_REGION, //DONE
SEND_INTERACTION_WITH_REGION4, //DONE
SEND_INTERACTION_WITH_REGION5, //DONE
SUBSCRIBE_INTERACTION_CLASS_WITH_REGION, //DONE
SUBSCRIBE_OBJECT_CLASS_ATTRIBUTES_WITH_REGION, //DONE
UNASSOCIATE_REGION_FOR_UPDATES, //DONE
UNSUBSCRIBE_INTERACTION_CLASS_WITH_REGION, //DONE
UNSUBSCRIBE_OBJECT_CLASS_WITH_REGION, //DONE

//miscellaneous
DISABLE_ATTRIBUTE_RELEVANCE_ADVISORY_SWITCH, //DONE
DISABLE_ATTRIBUTE_SCOPE_ADVISORY_SWITCH, //DONE
DISABLE_CLASS_RELEVANCE_ADVISORY_SWITCH, //DONE
DISABLE_INTERACTION_RELEVANCE_ADVISORY_SWITCH, //DONE
ENABLE_ATTRIBUTE_RELEVANCE_ADVISORY_SWITCH, //DONE
ENABLE_ATTRIBUTE_SCOPE_ADVISORY_SWITCH, //DONE
ENABLE_CLASS_RELEVANCE_ADVISORY_SWITCH, //DONE
ENABLE_INTERACTION_RELEVANCE_ADVISORY_SWITCH, //DONE
GET_ATTRIBUTE_HANDLE, //DONE
GET_ATTRIBUTE_NAME, //DONE
GET_ATTRIBUTE_ROUTING_SPACE_HANDLE,
GET_DIMENSION_HANDLE, //DONE
GET_DIMENSION_NAME, //DONE
GET_INTERACTION_CLASS_HANDLE, //DONE
GET_INTERACTION_CLASS_NAME, //DONE
GET_INTERACTION_ROUTING_SPACE_HANDLE,
GET_OBJECT_CLASS, //DONE
GET_OBJECT_CLASS_HANDLE, //DONE
GET_OBJECT_CLASS_NAME, //DONE
GET_OBJECT_INSTANCE_HANDLE, //DONE
GET_OBJECT_INSTANCE_NAME, //DONE
GET_ORDERING_HANDLE, //DONE
GET_ORDERING_NAME, //DONE
GET_PARAMETER_HANDLE, //DONE
GET_PARAMETER_NAME, //DONE
GET_REGION, //DONE
GET_REGION_TOKEN, //DONE
GET_ROUTING_SPACE_HANDLE, //DONE
GET_ROUTING_SPACE_NAME, //DONE
GET_TRANSPORTATION_HANDLE, //DONE
GET_TRANSPORTATION_NAME, //DONE
TICK0, //DONE
TICK2, //DONE


//---------------------------------------
// FEDERATE AMBASSADOR //DONE. TESTING TO FOLLOW

//time management //DONE (TESTING TO FOLLOW)
REQUEST_RETRACTION, //DONE
TIME_ADVANCE_GRANT, //DONE
TIME_REGULATION_ENABLED, //DONE
TIME_CONSTRAINED_ENABLED, //DONE

//federate managment //DONE (TESTING TO FOLLOW)
ANNOUNCE_SYNCHRONISATION_POINT, //DONE
FEDERATION_NOT_RESTORED, //DONE
FEDERATION_NOT_SAVED, //DONE
FEDERATION_RESTORE_BEGUN, //DONE
FEDERATION_RESTORED, //DONE
FEDERATION_SAVED, //DONE
FEDERATION_SYNCHRONISED, //DONE
INITIATE_FEDERATE_RESTORE, //DONE
INITIATE_FEDERATE_SAVE, //DONE
REQUEST_FEDERATION_RESTORE_FAILED, //DONE
REQUEST_FEDERATION_RESTORE_SUCCEEDED, //DONE
SYNCHRONISATION_POINT_REGISTRATION_FAILED, //DONE
SYNCHRONISATION_POINT_REGISTRATION_SUCCEEDED, //DONE

//declaration management //DONE (TESTING TO FOLLOW)
START_REGISTRATION_FOR_OBJECT_CLASS, //DONE
STOP_REGISTRATION_FOR_OBJECT_CLASS, //DONE
TURN_INTERACTIONS_OFF, //DONE
TURN_INTERACTIONS_ON, //DONE

//object management //DONE (TESTING TO FOLLOW)
ATTRIBUTES_IN_SCOPE, //DONE
ATTRIBUTES_OUT_OF_SCOPE, //DONE
DISCOVER_OBJECT_INSTANCE, //DONE
PROVIDE_ATTRIBUTE_VALUE_UPDATE, //DONE
RECEIVE_INTERACTION3, //DONE
RECEIVE_INTERACTION5, //DONE
REFLECT_ATTRIBUTE_VALUES3, //DONE
REFLECT_ATTRIBUTE_VALUES5, //DONE
REMOVE_OBJECT_INSTANCE2, //DONE
REMOVE_OBJECT_INSTANCE4, //DONE
TURN_UPDATES_OFF_FOR_OBJECT_INSTANCE, //DONE
TURN_UPDATES_ON_FOR_OBJECT_INSTANCE, //DONE

//ownership managment //DONE (TESTING TO FOLLOW)
ATTRIBUTE_IS_NOT_OWNED, //DONE
ATTRIBUTE_OWNED_BY_RTI, //DONE
ATTRIBUTE_OWNERSHIP_ACQUISITION_NOTIFICATION, //DONE
ATTRIBUTE_OWNERSHIP_DIVESTITURE_NOTIFICATION, //DONE
ATTRIBUTE_OWNERSHIP_UNAVAILABLE, //DONE
CONFIRM_ATTRIBUTE_OWNERSHIP_ACQUISITION_CANCELLATION, //DONE
INFORM_ATTRIBUTE_OWNERSHIP, //DONE
REQUEST_ATTRIBUTE_OWNERSHIP_ASSUMPTION, //DONE
REQUEST_ATTRIBUTE_OWNERSHIP_RELEASE, //DONE

// END RTI_13NG
*/



UniqueHandleFactory < Action*, 1 > Action::actions;

Action::Action():
    actionContext(Action::NOP),
    outgoing(true){

};



Action::~Action(){

}

void* Action::execute(){

    Channel *channel = 
        (Channel_RTI_13NG *)(Channel::channels.getValue(channelId));
    
    if (channel == NULL) {
        LOGMSG(0, "Error! channel is void\n");
        exit(1);
    }

//     //TODO: process any queue additions ??
//     if(!Action::processingQueue){
//         LOGMSG(3, "Processing queue for channel: " << channel_id << "\n");        
//         Action::processingQueue = true;
//         channel->processQueue();
//         Action::processingQueue = false;
//     }
    
    
    if (channel->protocol == Channel::PROTOCOL_RTI_13NG) {
        return Action_RTI_13NG::execute((Channel_RTI_13NG *)channel, this);
    };   
    
    switch (actionContext) {
    case NOP:
        // nothing
        break;
        
    default:
        LOGERR("Unknown Action Context `" << Action_RTI_13NG::getContextAsString(actionContext) << "' \n");
        exit(1);		
        break;
    };

}

/*

request() is responsible for:
  - storing the Action in the static store
  - setting the ID as returned by the static store
  - requesting that the Action instance be executed
  - returning the value to the interposed federate

*/
void* Action::request(){

    //store Action in static store
    bool isNew = false;
    handleType handle = Action::actions.getUniqueHandle(hash(), &isNew);
    
    if(isNew){

      // set the action
      Action::actions.setValue(handle, this);		

    }

    //set the Actions id as that returned by the static store
    this->actionId = handle;

    //request the action be executed
    Channel *aChannel = (Channel*)Channel::channels.getValue(channelId);
    //Model aModel = aChannel->getModel();
    
    //ignore all incoming actions as they are not modelled
    if(!outgoing){
        execute();
        return NULL;
    }

    void *retval;
    bool executeAnyway = false;
    bool matches = Model::model->request(this, &executeAnyway);
    if(matches || executeAnyway){

        //LOGMSG(1, "Model accepts this action.\n");
         retval = execute();
         
    }

    if(matches){

        //tell the Model about this return value
        Model::model->result(this, retval);

    } 

    LOGMSG(4, "finished result, passing retval back\n");    

    //pass it back to the client as appropriate
    return retval;
    
}


/*

hash() is responsible for returning a unique hash of an Action each time
one occurs

*/
std::string Action::hash(){
    
    //TODO: Implement this
    return "";
    
}

